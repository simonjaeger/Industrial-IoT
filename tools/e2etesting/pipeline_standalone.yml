name: $(Date:yyyyMMdd)$(Rev:rr)

trigger: none
pr: none

variables:
- template: steps/variables.yml

stages:
- stage: build
  displayName: "Build Resources"
  condition: ne(variables['UseExisting'], true)
  jobs:
  - job: buildtestresources
    pool:
      vmImage: 'windows-latest'
    displayName: 'Build Test Resources'
    steps:
    - template: steps/buildtestresources.yml

- stage: deploy
  displayName: "Deploy Components"
  dependsOn: build
  condition: and(not(canceled()), eq(dependencies.build.result, 'Succeeded'))
  jobs:  
  - job: deploystandalone
    pool:
      vmImage: 'windows-latest'
    displayName: 'Deploy Standalone Resources'
    steps:
    - template: steps/deploystandalone.yml

  - job: deploytestresources
    pool:
      vmImage: 'vs2017-win2016'
    condition: and(not(canceled()), eq(dependencies.deploystandalone.result, 'Succeeded'))
    dependsOn: deploystandalone
    displayName: 'Deploy Test Resources'
    steps:
    - template: steps/deploynestededgeresources.yml

- stage: runtests
  displayName: "Execute tests"
  dependsOn: deploy
  condition: and(not(canceled()), or(eq(dependencies.deploy.result, 'Succeeded'), eq(dependencies.deploy.result, 'Skipped')))
  jobs:
  - job: runtests
    pool:
      vmImage: 'windows-latest'
    timeoutInMinutes: 120
    displayName: 'Run End 2 End Tests'
    steps:
    - template: steps/runtests.yml
      parameters:
        ModeName: PublisherMode
        ModeValue: standalone

- stage: cleanup
  displayName: Cleanup resources
  dependsOn: runtests
  condition: and(not(canceled()), eq(variables['Cleanup'], true))
  jobs:
  - job: cleanup
    pool:
      vmImage: 'windows-latest'
    displayName: Cleanup
    steps:
    - template: steps/cleanup.yml
      parameters:
        CleanupAppRegistrations: false
  
